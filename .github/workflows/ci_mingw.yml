name: Build with MinGW32

on:
  push:
    paths:
      - '**'
      - '!**.md'
      - '!connanfile.txt'
      - '!.github/workflows/**'
      - '.github/workflows/ci_mingw.yml'
  pull_request:
    paths:
      - '**'
      - '!**.md'
      - '!connanfile.txt'
      - '!.github/workflows/**'
      - '.github/workflows/ci_mingw.yml'

permissions:
  contents: read

jobs:
  build:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install MSYS2 
        uses: msys2/setup-msys2@61f9e5e925871ba6c9e3e8da24ede83ea27fa91f # v2.27.0
        with:
          msystem: MINGW32
          update: true
          install: git
          pacboy: cc:p cmake:p 

      - name: Set up Python for MINGW32
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          architecture: 'x86'
      
      - name: Create build directories
        run: mkdir _install _build _examples _python
        shell: bash

      - name: Set Up Conan
        run: |
          CONAN_ROOT="${{ github.workspace }}/_conan"
          conan_args=("install")
          conan_args+=("--output-folder=${CONAN_ROOT}")
          conan_args+=("--build=missing")
          conan_args+=("--generator" "CMakeDeps")
          conan_args+=("--generator" "CMakeToolchain")
          conan_args+=("--settings" "build_type=Release")
          conan_args+=("--requires=pybind11/2.11.1")
          conan_args+=("--settings" "compiler=gcc")
          conan_args+=("--settings" "compiler.version=14")
          conan_args+=("--settings" "compiler.libcxx=libstdc++11")
          conan_args+=("--settings" "arch=x86")
          python -m pip install --upgrade pip "numpy<2" conan
          conan profile detect
          echo conan "${conan_args[@]}"
          conan "${conan_args[@]}"
          echo "CONAN_ROOT=${CONAN_ROOT}" >> $GITHUB_ENV
          echo "CMAKE_TOOLCHAIN_FILE=${CONAN_ROOT}/conan_toolchain.cmake" >> $GITHUB_ENV
          echo "Boost_ROOT=${CONAN_ROOT}" >> $GITHUB_ENV
        shell: bash

      - name: Install Python Dependencies
        run: |
          pip install pybind11
          pybind11_DIR=$(python -c 'import pybind11; print(pybind11.get_cmake_dir())')
          echo "pybind11_DIR=$pybind11_DIR" >> $GITHUB_ENV

          echo "PYTHON_INSTALL_DIR=${{ github.workspace }}/_install/python" >> $GITHUB_ENV
          echo "PYTHONPATH=${{ github.workspace }}/_install/python" >> $GITHUB_ENV
          PYTHON_EXECUTABLE=$(which python)
          echo "PYTHON_EXECUTABLE=${PYTHON_EXECUTABLE}" >> $GITHUB_ENV
        shell: bash

      - name: Build project
        run: |
          set -e
          cd _build
          cmake .. \
            -DPYTHON=ON \
            -DPYBIND11=ON \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_TOOLCHAIN_FILE="${{ env.CMAKE_TOOLCHAIN_FILE }}" \
            -DCMAKE_POLICY_DEFAULT_CMP0091=NEW
          cmake --build .
        shell: bash
      
      - name: Test Pybind11
        run: |
          set -e
          "${{ env.PYTHON_EXECUTABLE }}" src/pybind11/PyBindImathTest/test_import_pybindimath.py
        shell: bash

      - name: Test
        working-directory: _build
        run: |
          set -e
          ctest -T Test -C Release --timeout 7200 --output-on-failure -VV
        shell: bash
