name: Build with MinGW32

on:
  push:
    paths:
      - '**'
      - '!**.md'
      - '!connanfile.txt'
      - '!.github/workflows/**'
      - '.github/workflows/ci_mingw.yml'
  pull_request:
    paths:
      - '**'
      - '!**.md'
      - '!connanfile.txt'
      - '!.github/workflows/**'
      - '.github/workflows/ci_mingw.yml'

permissions:
  contents: read

jobs:
  build:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}

    steps:

      - uses: actions/checkout@v3

      - name: Install MSYS2 
        uses: msys2/setup-msys2@61f9e5e925871ba6c9e3e8da24ede83ea27fa91f # v2.27.0
        with:
          msystem: MINGW32
          update: true
          install: git
          pacboy: cc:p cmake:p python:p

      - name: Set Up Conan
        shell: bash
        run: |
          set -e
      
          VENV_DIR="${{ github.workspace }}/venv"
          echo "VENV_DIR=${VENV_DIR}" >> $GITHUB_ENV
      
          python -m venv "$VENV_DIR"
      
          # Use python.exe directly from the venv (avoids activation issues on Windows)
          PYTHON_EXE="$VENV_DIR/Scripts/python.exe"
          "$PYTHON_EXE" -m ensurepip
          "$PYTHON_EXE" -m pip install --upgrade pip "numpy<2" conan
      
          # Prepare Conan install
          CONAN_ROOT="${{ github.workspace }}/_conan"
          echo "CONAN_ROOT=${CONAN_ROOT}" >> $GITHUB_ENV
          echo "CMAKE_TOOLCHAIN_FILE=${CONAN_ROOT}/conan_toolchain.cmake" >> $GITHUB_ENV
      
          # Detect Conan profile and install dependencies
          "$PYTHON_EXE" -m conan profile detect
          "$PYTHON_EXE" -m conan install . \
            --output-folder="${CONAN_ROOT}" \
            --build=missing \
            --generator CMakeDeps \
            --generator CMakeToolchain \
            --settings build_type=Release \
            --requires=pybind11/2.11.1 \
            --settings compiler=gcc \
            --settings compiler.version=14 \
            --settings compiler.libcxx=libstdc++11 \
            --settings arch=x86

      - name: Install Python Dependencies
        shell: bash
        run: |
          set -e
      
          VENV_DIR="${{ env.VENV_DIR }}"
          PYTHON_EXE="$VENV_DIR/Scripts/python.exe"
      
          "$PYTHON_EXE" -m pip install pybind11
      
          PYBIND11_DIR=$("$PYTHON_EXE" -c "import pybind11; print(pybind11.get_cmake_dir())")
          echo "pybind11_DIR=$PYBIND11_DIR" >> $GITHUB_ENV
      
          echo "PYTHON_INSTALL_DIR=${{ github.workspace }}/_install/python" >> $GITHUB_ENV
          echo "PYTHONPATH=${{ github.workspace }}/_install/python" >> $GITHUB_ENV
          echo "PYTHON_EXECUTABLE=$PYTHON_EXE" >> $GITHUB_ENV
      
      - name: Build project
        shell: bash
        run: |
          set -e
      
          PYTHON_EXE="${{ env.VENV_DIR }}/Scripts/python.exe"
      
          cd _build
          cmake .. \
            -DPYTHON=ON \
            -DPYBIND11=ON \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_TOOLCHAIN_FILE="${{ env.CMAKE_TOOLCHAIN_FILE }}" \
            -DCMAKE_POLICY_DEFAULT_CMP0091=NEW
      
          cmake --build .
      
      
      - name: Test Pybind11
        shell: bash
        run: |
          set -e
      
          export PATH="${{ github.workspace }}/_install/lib:$PATH"
          export PYTHONPATH="${{ github.workspace }}/_install/python"
      
          echo "PATH=$PATH"
          echo "PYTHONPATH=$PYTHONPATH"

          PYTHON_EXE="${{ env.VENV_DIR }}/Scripts/python.exe"
          "$PYTHON_EXE" src/pybind11/PyBindImathTest/test_import_pybindimath.py
      
      - name: Test
        shell: bash
        working-directory: _build
        run: |
          set -e
      
          export PATH="${{ github.workspace }}/_install/lib:$PATH"
          export PYTHONPATH="${{ github.workspace }}/_install/python"
      
          echo "PATH=$PATH"
          echo "PYTHONPATH=$PYTHONPATH"
    
          ctest -T Test -C Release --timeout 7200 --output-on-failure -VV
      